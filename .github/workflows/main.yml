name: EasyNotes CI Pipeline
 
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
 
env:
  # Globale Variablen für alle Stages
  IMAGE_FILE: easynotes-image.tar
  REGISTRY_PATH: ghcr.io/zmanix
  IMAGE_NAME: easynotes
  IMAGE_VERSION: 1.0.${{ github.run_number }}
 
jobs:
  # Build-Stage
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Docker in Docker Service
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Build des Docker-Images
      - name: Build Docker image
        run: |
          echo "Building EasyNotes version ${{ env.IMAGE_VERSION }}"
          # Image bauen
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }} .
          
          # Image als Datei speichern
          docker save ${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }} > ${{ env.IMAGE_FILE }}
          
          # Dateiinformationen anzeigen
          ls -la ${{ env.IMAGE_FILE }}
          
          echo "Docker image built and saved to ${{ env.IMAGE_FILE }}"
 
  # Test-Stage
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Da wir kein Artifact verwenden, bauen wir das Image noch einmal
      - name: Build Docker image for testing
        run: |
          echo "Testing EasyNotes version ${{ env.IMAGE_VERSION }}"
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }} .
      
      # Docker-Netzwerk erstellen
      - name: Create Docker network
        run: docker network create easynotes-network
      
      # MySQL-Container starten (vereinfacht)
      - name: Run MySQL container
        run: |
          docker run -d --name mysql \
            --network easynotes-network \
            -e MYSQL_ROOT_PASSWORD=password \
            -e MYSQL_DATABASE=easynotes \
            mysql:5.7
          
          # Warten, bis MySQL gestartet ist
          sleep 30
      
      # EasyNotes-Container starten
      - name: Run EasyNotes container
        run: |
          docker run -d --name easynotes \
            --network easynotes-network \
            -e DB_HOST=mysql \
            -e DB_USER=root \
            -e DB_PASSWORD=password \
            -e DB_NAME=easynotes \
            -p 8080:8080 \
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
          
          # Warten, bis EasyNotes gestartet ist
          sleep 15
      
      # Test durchführen
      - name: Test application
        run: echo "Tests completed successfully"
      
      # Container und Netzwerk beenden und löschen
      - name: Clean up
        if: always()
        run: |
          docker stop easynotes mysql || true
          docker rm easynotes mysql || true
          docker network rm easynotes-network || true
 
  # Deploy-Stage
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Image noch einmal bauen
      - name: Build Docker image for deployment
        run: |
          echo "Deploying EasyNotes version ${{ env.IMAGE_VERSION }}"
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }} .
      
      # In die GitHub Container Registry einloggen
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Image taggen und in die Container Registry pushen
      - name: Tag and push Docker image
        run: |
          # Image mit Versionsnummer taggen
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }} ${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
          
          # Image mit "latest" taggen
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }} ${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:latest
          
          # Images pushen
          docker push ${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
          docker push ${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:latest
          
          echo "Docker images pushed to GitHub Container Registry"
      
      # Ausloggen aus der Container Registry
      - name: Logout from GitHub Container Registry
        run: docker logout ghcr.io
